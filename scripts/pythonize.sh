#!/bin/bash

build_makefile()
{

    makefile=$1

    if [[ -z $makefile ]]
    then
	makefile=makefile
    fi
    
    if [[ -e $makefile ]]
    then
	echo "[ERROR] $(pwd)/$makefile already exists." >&2
	exit 1
    fi
    
cat <<EOF >$makefile
PYTHON=\`which python\`
NAME=\`python setup.py --name\`

all: check test source deb

init:
	pip install -r requirements-deb.txt

dist:	source deb

source:
	\$(PYTHON) setup.py sdist

deb:
	\$(PYTHON) setup.py --command-packages=stdeb.command bdist_deb

rpm:
	\$(PYTHON) setup.py bdist_rpm --post-install=rpm/postinstall --pre-uninstall=rpm/preuninstall

test:
	\$(PYTHON) -m unittest tests

check:
	find . -name \*.py | grep -v "^test_" | xargs pylint --errors-only --reports=n

clean:
	\$(PYTHON) setup.py clean
	rm -rf build/ MANIFEST dist build my_program.egg-info deb_dist
EOF

cat <<EOF >requirements-dev.txt
pylint
EOF
}

build_unit_tests()
{

    if [[ ! -d tests ]]
    then
	mkdir tests
    fi

    pushd tests > /dev/null
    
    cat <<EOF >testcase1.py
import unittest

class TestStringMethods(unittest.TestCase):

  def test_upper(self):
      self.assertEqual('foo'.upper(), 'FOO')

  def test_isupper(self):
      self.assertTrue('FOO'.isupper())
      self.assertFalse('Foo'.isupper())

  def test_split(self):
      s = 'hello world'
      self.assertEqual(s.split(), ['hello', 'world'])
      # check that s.split fails when the separator is not a string
      with self.assertRaises(TypeError):
          s.split(2)

if __name__ == '__main__':
    unittest.main()

EOF
    popd > /dev/null
}
 
ALL_PARAMS=$@

project=my_project

if [[ ! -d python ]]
then
    mkdir python
    echo "[INFO] whole python project $project will be within python directory"
fi

pushd python >/dev/null
if [[ ! -e makefile ]]
then
    build_makefile
fi

if [[ ! -d "$project" ]]
then
    mkdir "$project"
    pushd "$project" >/dev/null
    if [[ ! -e __init__.py ]]
    then
	touch __init__.py
    fi

    if [[ ! -e setup.py ]]
    then
	cat <<EOF >setup.py
from distutils.core import setup
setup(name='$project',
      version='1.0',
      py_modules=['$project'],
     )
EOF
    fi
    
    if [[ ! -e main.py ]]
    then
	cat <<EOF >main.py
# main
EOF
    fi
    popd >/dev/null
    cat <<EOF >README
generated by $ALL_PARAMS

    |-- bin
    |   \`-- $project
    |-- docs
    |   \`-- doc.txt
    |-- $project
    |   |-- data
    |   |   \`-- some_data.html
    |   |-- __init__.py
    |   |-- submodule
    |   |   \`-- __init__.py
    |   |-- helpers.py
    |-- tests
    |   |-- __init__.py
    |   |-- test_helpers.py
    |-- Makefile
    |-- CHANGES.txt
    |-- LICENSE.txt
    |-- README.md
    |-- requirements-dev.txt
    |-- requirements.txt
    \`-- setup.py
EOF

    build_unit_tests
fi

popd >/dev/null


